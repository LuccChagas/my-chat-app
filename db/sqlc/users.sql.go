// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO users
(id, "password", cpf, email, phone, name, first_name, last_name, nick_name, created_at)
VALUES( $1, $2, $3, $4, $5, $6, $7, $8, $9, now())
RETURNING id, password, cpf, email, phone, name, first_name, last_name, nick_name, created_at, updated_at
`

type CreateUsersParams struct {
	ID        uuid.UUID `json:"id"`
	Password  string    `json:"password"`
	Cpf       string    `json:"cpf"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Name      string    `json:"name"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	NickName  string    `json:"nick_name"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.queryRow(ctx, q.createUsersStmt, createUsers,
		arg.ID,
		arg.Password,
		arg.Cpf,
		arg.Email,
		arg.Phone,
		arg.Name,
		arg.FirstName,
		arg.LastName,
		arg.NickName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Cpf,
		&i.Email,
		&i.Phone,
		&i.Name,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, password, cpf, email, phone, name, first_name, last_name, nick_name, created_at, updated_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Password,
			&i.Cpf,
			&i.Email,
			&i.Phone,
			&i.Name,
			&i.FirstName,
			&i.LastName,
			&i.NickName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, password, cpf, email, phone, name, first_name, last_name, nick_name, created_at, updated_at FROM users
where users.id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Cpf,
		&i.Email,
		&i.Phone,
		&i.Name,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByNickname = `-- name: GetUserByNickname :one
SELECT id, password, cpf, email, phone, name, first_name, last_name, nick_name, created_at, updated_at FROM users
WHERE users.nick_name = $1
`

func (q *Queries) GetUserByNickname(ctx context.Context, nickName string) (User, error) {
	row := q.queryRow(ctx, q.getUserByNicknameStmt, getUserByNickname, nickName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Cpf,
		&i.Email,
		&i.Phone,
		&i.Name,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
